# See AWS GO MOD section at this link for how this project was created..
# https://www.serverless.com/framework/docs/providers/aws/examples/hello-world/go/
# sls create --template aws-go-mod --path GoConchRepublicBackEnd

# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: goconchrepublic-initiate
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

# A custom variables section for centralizing things (e.g. Environmental Variables, etc.) that need to be referenced
# across modules
custom:
  snsTopic: arn:aws:sns:us-east-1:${env:AWS_ACCOUNT}:FloridaKeysTableUpdate

provider:
  name: aws
  runtime: go1.x
  # Set the default stage used. Default is dev
  stage: "dev"
  # Overwrite the default region used. Default is us-east-1
  region: "us-east-1"
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  #timeout: 10
  logRetentionInDays: 30 # Set the default RetentionInDays for a CloudWatch LogGroup
  versionFunctions: false  #if each different deploy needs to be long term retained, then set to true
  # you can ADD statements to the Lambda function's IAM Role (iamRoleStatements) here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: arn:aws:events:us-east-1:${env:AWS_ACCOUNT}:event-bus/conchrepublic
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: arn:aws:sns:*:${env:AWS_ACCOUNT}:FloridaKeys*

#BY DEFAULT, these logging group/events role statements come built-in
#    - Effect: "Allow"
#      Action:
#        - "logs:CreateLogStream"
#        - "logs:CreateLogGroup"
#        - "logs:PutLogEvents"

# you can define service wide environment variables here
#environment:

package:
  exclude:
    - ./**
  include:
    - ./bin/initiate

functions:
  initiate:
    handler: bin/initiate
    memorySize: 128
    # Function level environment variables
    environment:
      SNS_TOPIC: ${self:custom.snsTopic}
    events:
      - http:
          path: initiate
          method: get
      - eventBridge:
          # You can have a separate eventBus (instead of Default) if needed
          # eventBus: 'arn:aws:events:us-east-1:619676567607:event-bus/conchrepublic'
          # To have eventBridge run this function according to a schedule, or be cron kicked off, use rate or cron
          #see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html#cron-expressions
          #schedule: rate(5 minutes)
          #NOTE!! schedule ONLY works as a rule on the default event bus
          #NOTE!! cron time uses UTC time, which may be different than your time, so adjust HOUR parm accordingly
          #so job kicks off at the right time (local time)
          schedule: cron(0 22 ? * MON-FRI *) #run at 23:00 UTC time Monday through Friday
