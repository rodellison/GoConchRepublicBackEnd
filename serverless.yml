#
# For full config options, check the docs:
# https://www.serverless.com/framework/docs/providers/aws/guide/serverless.yml/

service: ConchRepublicBackend
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

provider:
  name: aws
  runtime: go1.x
  # Set the default stage used. Default is dev
  stage: "dev"
  # Overwrite the default region used. Default is us-east-1
  region: "us-east-1"
  # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  #timeout: 10
  logRetentionInDays: 30 # Set the default RetentionInDays for a CloudWatch LogGroup

# you can ADD statements to the Lambda function's IAM Role (iamRoleStatements) here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: "arn:aws:events:us-east-1:619676567607:event-bus/conchrepublic"
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: [
        "arn:aws:dynamodb:us-east-1:619676567607:table/FloridaKeysEvents",
        "arn:aws:dynamodb:us-east-1:619676567607:table/FloridaKeysEventsTest"
      ]
    - Effect: "Allow"
      Action:
        - "sns:Publish"
      Resource: "arn:aws:sns:*:619676567607:FloridaKeysTableUpdate"

#BY DEFAULT, these logging group/events role statements come built-in
#    - Effect: "Allow"
#      Action:
#        - "logs:CreateLogStream"
#        - "logs:CreateLogGroup"
#        - "logs:PutLogEvents"


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  initiate:
    handler: bin/initiate
    events:
      - http:
          path: initiate
          method: get
      - eventBridge:
          # You can have a separate eventBus (instead of Default) if needed
#          eventBus: 'arn:aws:events:us-east-1:619676567607:event-bus/conchrepublic'
          # To have eventBridge run this function according to a schedule, or be cron kicked off, use rate or cron
          #see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html#cron-expressions
          #schedule: rate(5 minutes)
          #NOTE!! schedule ONLY works as a rule on the default event bus
          #NOTE!! cron time uses UTC time, which may be different than your time, so adjust HOURS parm accordingly
          #so job kicks off at the right time (local time)
          schedule: cron(0 13 ? * SUN *)



  cleanup:
    handler: bin/cleanup
    environment: # Function level environment variables
      DYNAMO_DB_TABLENAME: "FloridaKeysEventsTest"
    events:
      - http:
          path: cleanup
          method: get
      - eventBridge:
          # You can have a separate eventBus (instead of Default) if needed
          #          eventBus: 'arn:aws:events:us-east-1:619676567607:event-bus/conchrepublic'
          # To have eventBridge run this function according to a schedule, or be cron kicked off, use rate or cron
          #see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html#cron-expressions
          #schedule: rate(5 minutes)
          #NOTE!! schedule ONLY works as a rule on the default event bus
          #NOTE!! cron time uses UTC time, which may be different than your time, so adjust HOURS parm accordingly
          #so job kicks off at the right time (local time)
          schedule: cron(15 13 ? * SUN *)

  fetch:
    handler: bin/fetch
    environment: # Function level environment variables
      URLBASE: "https://fla-keys.com"
      URLBASE2: "/calendar/all/florida-keys/"
    events:
      - eventBridge:
# You can have a separate eventBus (instead of Default) if needed
          eventBus: "arn:aws:events:us-east-1:619676567607:event-bus/conchrepublic"
          pattern:
            source:
              - "conchrepublicbackend.initiate"
            detail-type:
              - "conchrepublicbackend.fetch"

  database:
    handler: bin/database
    environment: # Function level environment variables
      DYNAMO_DB_TABLENAME: "FloridaKeysEventsTest"

